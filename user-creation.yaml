AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating Secrets Manager, IAM groups and users, Parameter Store, and Event bridge rules.

Parameters:
  # S3 Bucket
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Go Lambda function ZIP file
    Default: cloud-formation-artifact
  LambdaCodeS3Key:
    Type: String
    Description: S3 key for the Go Lambda function ZIP file
    Default: user-creation-lambda.zip

  # Username & Email
  Ec2UserEmail:
    Type: String
    Description: Email address for the ec-user
    Default: ec2-user@example.com
  s3UserEmail:
    Type: String
    Description: Email address for the s3-user
    Default: s3-user@example.com

Resources:
  # Secrets Manager: One-Time Password
  OneTimePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: OneTimePassword
      Description: One-time password for all users
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true


  # User Groups
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3UserGroup
      Policies:
        - PolicyName: S3ViewOnlyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"

  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2UserGroup
      Policies:
        - PolicyName: EC2InfoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:Get*
                Resource: "*"

  Ec2User:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2User
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${OneTimePasswordSecret}::password}}"
        PasswordResetRequired: true

  S32User:
    Type: AWS::IAM::User
    Properties:
      UserName: s3User
      Groups:
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${OneTimePasswordSecret}::password}}"
        PasswordResetRequired: true

  # SSM:Parameters
  Ec2UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /provisioned-users/ec2User/email
      Type: String
      Value: !Ref Ec2UserEmail
      Description: Registered email for ec2User

  s3UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /provisioned-users/s3User/email
      Type: String
      Value: !Ref s3UserEmail
      Description: Registered email for s3User

  # IAM Role for Lambda with read access to Parameters and Secrets
  LambdaHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cf-users/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OneTimePasswordSecret


  # Lambda Function
  UserCreationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserCreationFunction
      Description: Logs new user email and temporary password
      Handler: bootstrap
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: provided.al2023
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key

  # Allow EventBridge to invoke Lambda
  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UserCreationLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt IAMUserEventRule.Arn

  # EventBridge rule to catch CreateUser API calls
  IAMUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Fire on new IAM user creation
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      Targets:
        - Arn: !GetAtt UserCreationLambda.Arn
          Id: UserCreationTarget

Outputs:
  OneTimePasswordSecretArn:
    Description: ARN of the Secrets Manager secret for the otp
    Value: !Ref OneTimePasswordSecret
  EC2UserGroupName:
    Description: Name of the EC2 read-only group
    Value: !Ref EC2UserGroup
  S3UserGroupName:
    Description: Name of the S3 read-only group
    Value: !Ref S3UserGroup
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt UserCreationLambda.Arn
