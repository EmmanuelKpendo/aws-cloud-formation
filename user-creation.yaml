AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating Secrets Manager, IAM groups and users, Parameter Store, and Event bridge rules.

Parameters:
  # S3 Bucket
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Go Lambda function ZIP file
    Default: cloud-formation-artifact
  LambdaCodeS3Key:
    Type: String
    Description: S3 key for the Go Lambda function ZIP file
    Default: user-creation-lambda.zip

  # Username & Email
  EC2UserName:
    Type: String
    Default: ec2-user
  S3UserName:
    Type: String
    Default: s3-user
  EC2UserEmail:
    Type: String
    Default: ec2-user@example.com
  S3UserEmail:
    Type: String
    Default: s3-user@example.com

Resources:
  # Secrets Manager: One-Time Password
  OneTimePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: OneTimePassword
      Description: One-time password for all users
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "otp"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # User Groups
  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2UserGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3UserGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # SSM:Parameters
  EC2UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'cf-user-${EC2UserName}'
      Type: String
      Value: !Ref EC2UserEmail
  S3UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'cf-user-${S3UserName}'
      Type: String
      Value: !Ref S3UserEmail

  # IAM Users
  EC2UserAccount:
    Type: AWS::IAM::User
    DependsOn:
      - UserCreationLambda
      - NewUserEventRule
    Properties:
      Groups:
        - !Ref EC2UserGroup
      UserName: !Ref EC2UserName
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${OneTimePasswordSecret}::otp}}'
        PasswordResetRequired: true
  S3UserAccount:
    Type: AWS::IAM::User
    DependsOn:
      - UserCreationLambda
      - NewUserEventRule
    Properties:
      Groups:
        - !Ref S3UserGroup
      UserName: !Ref S3UserName
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${OneTimePasswordSecret}::otp}}'
        PasswordResetRequired: true

  # EventBridge Rule
  NewUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: detect-new-iam-user
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "CreateUser"
          eventSource:
            - "iam.amazonaws.com"
      Targets:
        - Arn: !GetAtt UserCreationLambda.Arn
          Id: LambdaTarget

  # Lambda Permission for EventBridge
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserCreationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NewUserEventRule.Arn

  # Lambda IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: user-info-logger-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: access-secrets-ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OneTimePasswordSecret
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cf-user-*'

  # Lambda Function
  UserCreationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: log-user-info
      Description: Logs new user email and temporary password
      Handler: bootstrap
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: provided.al2023
      Timeout: 30
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key

Outputs:
  OneTimePasswordSecretArn:
    Description: ARN of the Secret Manager One-time password secret
    Value: !Ref OneTimePasswordSecret

  S3UserGroupName:
    Description: Name of the S3 Read-only IAM group
    Value: !Ref S3ReadOnlyGroup

  EC2UserGroupName:
    Description: Name of the EC2 Read-only IAM group
    Value: !Ref EC2ReadOnlyGroup

  LambdaFunctionArn:
    Description: Arn of the Lambda function for user creation
    Value: !GetAtt UserCreationLambda.Arn
